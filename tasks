#!/bin/bash
set -Ee

RELEASER_VERSION="2.1.0"
RELEASER_FILE="ops/releaser-${RELEASER_VERSION}"

mkdir -p ops
if [[ ! -f $RELEASER_FILE ]];then
  wget --quiet -O $RELEASER_FILE https://github.com/kudulab/releaser/releases/download/${RELEASER_VERSION}/releaser
fi
source $RELEASER_FILE

function check_flavor {
  if [ -z "$1" ]; then
    echo "Must specify flavor: alpine or ubuntu18"
    exit 2
  fi
}

command="$1"
case "${command}" in
    deps)
        glide install
        ;;
    build)
        rm -rf bin/dojo
        # disable the use of cgo with: CGO_ENABLED=0
        (set -x; GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o bin/dojo_darwin_amd64 ./; )
        (set -x; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o bin/dojo_linux_amd64 ./; )
        # to get a list supported golang platforms: go tool dist list
        ;;
    symlink)
        if [[ -n "$2" ]]; then
          os_suffix=$2
        else
          echo "Please provide OS prefix: linux or darwin"
          exit 5;
        fi
        # this binary is used in e2e tests
        rm -f bin/dojo
        ln -s dojo_${os_suffix}_amd64 ./bin/dojo
        chmod +x ./bin/dojo
        ;;
    unit)
        (set -x; go test -v -race ./...; )
        ;;
    e2e_py)
        python3 -m venv venv
        source venv/bin/activate
        pip3 install -r test/requirements.txt
        pytest test --verbose
        ;;
    e2e)
        check_flavor $2
        dojo -c Dojofile.e2e-$2 "./tasks e2e_py"
        ;;
    test_signals)
        check_flavor $2
        dojo -c Dojofile.e2e-$2 ./test/signal/signals-tests.sh
        ;;
    set_version)
        if [[ -n "$2" ]]; then
            next_version="$2"
        else
            last_version="$(releaser::get_last_version_from_whole_changelog ${changelog_file})"
            next_version="$(releaser::bump_patch_version ${last_version})"
        fi
        releaser::set_version_in_changelog "${changelog_file}" "${next_version}"
        echo "package main
const DojoVersion = \"${next_version}\"
" > "./version.go"
        releaser::log_info "Set version: ${next_version}"
        ;;
    verify_version)
        version="$(releaser::get_last_version_from_whole_changelog ${changelog_file})"
        if git tag | grep "${version}"; then
            releaser::log_error "The version: ${version} was already git tagged"
            exit 1
        fi
        changelog_first_line=$(cat ${changelog_file} | head -1)
        if [[ "${changelog_first_line}" == "#"*"Unreleased"* ]] || [[ "${changelog_first_line}" == "#"*"unreleased"* ]] || [[ "${changelog_first_line}" == "#"*"UNRELEASED"* ]];then
            releaser::log_error "Top of changelog has 'Unreleased' flag"
            exit 1
        fi
        if ! grep "${version}" ./version.go >/dev/null; then
            releaser::log_error "The file version.go does not contain: ${version}"
            exit 1
        fi
        releaser::log_info "Version: ${version} verified successfully"
        ;;
    release)
        version="$(releaser::get_last_version_from_whole_changelog ${changelog_file})"
        git tag "${version}"
        git push origin "${version}"
        ;;
    release_gh)
        if [ ! -f bin/dojo_linux_amd64 ]; then echo "dojo_linux_amd64 binary does not exist"; exit 1; fi
        if [ ! -f bin/dojo_darwin_amd64 ]; then echo "dojo_darwin_amd64 binary does not exist"; exit 1; fi
        if [ -z "$GITHUB_TOKEN" ]; then echo "GITHUB_TOKEN is unset"; exit 1; fi
        releaser::prepare_github_release_bin
        VERSION="$(releaser::get_last_version_from_whole_changelog ${changelog_file})"
        GH_USER=tomzo

        $GHRELEASE_BIN release \
          --user $GH_USER \
          --repo dojo \
          --tag $VERSION \
          --name $VERSION \
          --pre-release

        $GHRELEASE_BIN upload \
          --user $GH_USER \
          --repo dojo \
          --tag $VERSION \
          --name "dojo_linux_amd64" \
          --file bin/dojo_linux_amd64

        $GHRELEASE_BIN upload \
          --user $GH_USER \
          --repo dojo \
          --tag $VERSION \
          --name "dojo_darwin_amd64" \
          --file bin/dojo_darwin_amd64
        ;;
    generate_release_notes)
        version=${2?version not set}
        changelog="CHANGELOG.md"
        start_line_number=$(awk "/${version}/{ print NR; exit }" ${changelog})
        # now let's read the file, line by line, starting from start_line_number+1
        # up to "###" or the end of file
        line_read=0
        while read line; do
            line_read=$((line_read+1))
            if [ "${line_read}" -gt "${start_line_number}" ]; then
              if [[ "${line}" == "### "* ]]; then
                  # stop reading
                  exit 0
              fi
              echo "${line}"
            fi
        done < "${changelog}"
        ;;
    *)
        echo "Invalid command: '${command}'"
        exit 1
        ;;
esac
set +e
